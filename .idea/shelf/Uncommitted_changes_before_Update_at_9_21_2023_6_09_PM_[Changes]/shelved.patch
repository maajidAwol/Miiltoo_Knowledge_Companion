Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\r\n\r\nfrom flask import Flask, render_template, session, jsonify\r\nfrom flask import Flask, render_template, request\r\nimport os\r\nimport sys\r\nimport re\r\nimport json\r\nimport openai\r\nfrom langchain.chains import ConversationalRetrievalChain, RetrievalQA\r\nfrom langchain.chat_models import ChatOpenAI\r\nfrom langchain.document_loaders import DirectoryLoader, TextLoader\r\nfrom langchain.embeddings import OpenAIEmbeddings\r\nfrom langchain.indexes import VectorstoreIndexCreator\r\nfrom langchain.indexes.vectorstore import VectorStoreIndexWrapper\r\nfrom langchain.llms import OpenAI\r\nfrom langchain.vectorstores import Chroma\r\nfrom flask import Flask, request, render_template\r\nfrom flask_sqlalchemy import SQLAlchemy\r\n\r\ndef ext(text):\r\n  json_pattern = r'\\{.*\\}'\r\n\r\n  # Search for the JSON-like pattern in the text\r\n  match = re.search(json_pattern, text, re.DOTALL)\r\n\r\n  if match:\r\n    json_string = match.group()  # Get the matched JSON-like string\r\n    try:\r\n      # Parse JSON-like string into a Python dictionary\r\n      json_object = json.loads(json_string)\r\n      print(\"Extracted JSON-like object:\")\r\n      print(json.dumps(json_object, indent=4))\r\n      return json_object\r\n    except json.JSONDecodeError:\r\n      print(\"Found a JSON-like pattern, but it's not valid JSON.\")\r\n  else:\r\n    print(\"No JSON-like pattern found in the text.\")\r\ndef chat_function(prompt,path):\r\n    loader = TextLoader(path, encoding=\"utf-8\")  # Use this line if you only need data.txt\r\n    print(path)\r\n    index = VectorstoreIndexCreator().from_loaders([loader])\r\n\r\n    chain = ConversationalRetrievalChain.from_llm(\r\n        llm=ChatOpenAI(model=\"gpt-3.5-turbo\", temperature=0),\r\n        retriever=index.vectorstore.as_retriever(search_kwargs={\"k\": 1}),\r\n    )\r\n    # session.pop(\"hist\", None)\r\n    if \"bio\" not in session:\r\n        session[\"bio\"] = []\r\n\r\n    chat_history = session[\"bio\"]\r\n    result = chain({\"question\": prompt, \"chat_history\": chat_history})\r\n\r\n    # Append the current conversation turn to the chat history in the session\r\n    chat_history.append((prompt, result['answer']))\r\n    session[\"bio\"] = chat_history  # Update the chat history in the session\r\n\r\n    query = None\r\n    print(result)\r\n    print(session[\"bio\"])\r\n    return result\r\ndef quiz_function(prompt, path):\r\n\r\n    loader = TextLoader(path, encoding=\"utf-8\")\r\n    print(path)\r\n    # loader = DirectoryLoader(\"data/\")\r\n    index = VectorstoreIndexCreator().from_loaders([loader])\r\n\r\n    chain = ConversationalRetrievalChain.from_llm(\r\n        llm=ChatOpenAI(model=\"gpt-3.5-turbo\", temperature=0),\r\n        retriever=index.vectorstore.as_retriever(search_kwargs={\"k\": 1}),\r\n    )\r\n\r\n    query = prompt\r\n\r\n    result = chain({\"question\": prompt, \"chat_history\": \"\"})\r\n    print(result)\r\n    r = ext(result[\"answer\"])\r\n\r\n    query = None\r\n    if r== \"fail\":\r\n        render_template(\"bio-g9.html\")\r\n    else:\r\n        return r\r\n\r\nos.environ[\"OPENAI_API_KEY\"]=\"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\"\r\n\r\napp = Flask(__name__)\r\napp.static_folder = 'static'\r\napp.secret_key= \"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\"\r\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///profile.db'  # SQLite database\r\ndb = SQLAlchemy(app)\r\nclass User(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    full_name = db.Column(db.String(120), nullable=False)\r\n    username = db.Column(db.String(80), unique=True, nullable=False)\r\n    password = db.Column(db.String(80), nullable=False)\r\n\r\nwith app.app_context():\r\n   db.create_all()\r\n    # Add more fields as needed\r\n@app.route('/register', methods=['POST', 'GET'])\r\ndef register():\r\n    if request.method == 'POST':\r\n        full_name = request.form['full_name']\r\n        username = request.form['username']\r\n        password = request.form['password']\r\n        # Get other form data as needed\r\n\r\n        # Create a new user and add it to the database\r\n        new_user = User(full_name=full_name, username=username, password=password)\r\n        db.session.add(new_user)\r\n        db.session.commit()\r\n\r\n        return 'Registration Successful!'\r\n    return render_template('registration_form.html')  # You can create an HTML template for the form\r\n\r\n@app.route(\"/\")\r\ndef main():\r\n    return render_template(\"index.html\")\r\n# @app.route(\"/history/\")\r\n# def history():\r\n#     book='bk/History student textbook grade 9.pdf'\r\n#     return render_template(\"book.html\",book=book)\r\n# @app.route(\"/biology/\")\r\n# def biology():\r\n#     book = 'bk/Biology Student Textbook Grade 9.pdf'\r\n#     return render_template(\"book.html\",book=book)\r\n@app.route(\"/grade/\")\r\ndef grade():\r\n    book = request.args.get('book')\r\n    if book:\r\n       return render_template(\"book.html\",book=book)\r\n    else:\r\n        return render_template(\"grade.html\")\r\n@app.route(\"/request\", methods=[\"POST\"])\r\ndef send():\r\n    prompt = request.json.get(\"prompt\")\r\n    book = request.args.get('book')\r\n    choice = request.json.get(\"book_choice\")\r\n    print(choice)\r\n    path = \"\"\r\n\r\n    # if choice == \"bk/Biology Student Textbook Grade 9.pdf\":\r\n    #     path = \"books/Biology Student Textbook Grade 9.txt\"\r\n    # elif choice == \"bk/History student textbook grade 9.pdf\":\r\n    #     path = \"books/History student textbook grade 9.txt\"\r\n    # else:\r\n    #     print(\"tired\")\r\n    # path = \"books/Biology Student Textbook Grade 9.txt\"\r\n    url = choice\r\n\r\n    # Replace \"bk\" with \"books\"\r\n    path = url.replace(\"bk/\", \"books/\")\r\n    path = path[:-4] + \".txt\"\r\n    print(path)\r\n\r\n    # result = chat_function(prompt, path)\r\n    # return result\r\n    time.sleep(10)\r\n    if \"bio\" not in session:\r\n        session[\"bio\"] = []\r\n    chat_history = session[\"bio\"]\r\n    mock_text = \"I am your dedicated study companion, here to empower you in your academic journey. My mission is to assist you in comprehending your course materials and ultimately, helping you achieve better grades. With a wealth of knowledge and insightful analysis at my disposal, I'll break down complex concepts into digestible pieces, provide summaries, answer your questions, and offer valuable insights. Whether it's literature, science, history, or any other subject, I'm here to be your study buddy.\"\r\n\r\n    result = {\"answer\": mock_text}  # Mocking the result\r\n\r\n    # Append the current conversation turn to the chat history in the session\r\n    chat_history.append((prompt, result['answer']))\r\n    session[\"bio\"] = chat_history  # Update the chat history in the session\r\n\r\n    query = None\r\n    print(result)\r\n    print(session[\"bio\"])\r\n    return jsonify(result)\r\n\r\n# @app.route(\"/requestH\", methods=[\"POST\"])\r\n# def ChatWHistory():\r\n#     # prompt = request.json.get(\"prompt\")\r\n#     # path = \"books/History student textbook grade 9.txt\"\r\n#     # result = chat_function(prompt, path)\r\n#     time.sleep(10)\r\n#     chat_history = session[\"bio\"]\r\n#     mock_text = \"I am your dedicated study companion, here to empower you in your academic journey. My mission is to assist you in comprehending your course materials and ultimately, helping you achieve better grades. With a wealth of knowledge and insightful analysis at my disposal, I'll break down complex concepts into digestible pieces, provide summaries, answer your questions, and offer valuable insights. Whether it's literature, science, history, or any other subject, I'm here to be your study buddy.\"\r\n#\r\n#     result = {\"answer\": mock_text}  # Mocking the result\r\n#\r\n#     # Append the current conversation turn to the chat history in the session\r\n#     chat_history.append((\"kk\", result['answer']))\r\n#     session[\"bio\"] = chat_history  # Update the chat history in the session\r\n#\r\n#     query = None\r\n#     print(result)\r\n#     print(session[\"bio\"])\r\n#     return jsonify(result)\r\n@app.route(\"/quiz_request\",methods=[\"POST\"])\r\ndef quiz_send():\r\n    quiz_number = request.json.get('number')\r\n    chapter = request.json.get('chapter')\r\n    subtopic = request.json.get('subtopic')\r\n    choice = request.json.get(\"book_choice\")\r\n    prompt = f'generate a {quiz_number} conceptual and random question quiz from  the content specially from {chapter}:characteristics and subtopic {subtopic} having four choices a,b,c,d and answer letter and explanation  of the answer in json format'\r\n    path = \"\"\r\n\r\n\r\n    print(choice)\r\n\r\n    url = choice\r\n\r\n    # Replace \"bk\" with \"books\"\r\n    path = url.replace(\"bk/\", \"books/\")\r\n    path = path[:-4] + \".txt\"\r\n    print(path)\r\n    # if choice == \"bk/Biology Student Textbook Grade 9.pdf\":\r\n    #     path = \"books/Biology Student Textbook Grade 9.txt\"\r\n    # elif choice == \"bk/History student textbook grade 9.pdf\":\r\n    #     path = \"books/History student textbook grade 9.txt\"\r\n\r\n    result = quiz_function(prompt, path)\r\n    return result\r\n\r\n\r\n# @app.route(\"/quiz_requestH\",methods=[\"POST\"])\r\n# def quizH_send():\r\n#     quiz_number = request.json.get('number')\r\n#     chapter = request.json.get('chapter')\r\n#     subtopic = request.json.get('subtopic')\r\n#     prompt = f'generate a {quiz_number} conceptual and random question quiz from  the content specially from {chapter}:characteristics and subtopic {subtopic} having four choices a,b,c,d and answer letter and explanation  of the answer in json format'\r\n#     path = \"books/History student textbook grade 9.txt\"\r\n#     result = quiz_function(prompt, path)\r\n\r\n    # return result\r\n@app.route(\"/login\")\r\ndef login():\r\n    return render_template(\"login.html\")\r\n@app.route(\"/signup\")\r\ndef signup():\r\n    return render_template(\"signup.html\")\r\nif __name__ == \"__main__\":\r\n    app.run(debug=True)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision a2687b324b88e74059c2cc59b6adbcff7ec6a82f)
+++ b/app.py	(date 1695308922805)
@@ -1,6 +1,6 @@
 import time
 
-from flask import Flask, render_template, session, jsonify
+from flask import Flask, redirect, render_template, session, jsonify
 from flask import Flask, render_template, request
 import os
 import sys
@@ -115,7 +115,17 @@
 
         return 'Registration Successful!'
     return render_template('registration_form.html')  # You can create an HTML template for the form
-
+@app.route('/auth',methods=['POST','GET'])
+def auth():
+    allUser = User.query.all()
+    username=request.form['username'] 
+    password= request.form['password']
+    loggedin ='loggedIn'
+    for user in allUser:
+        if user.username==username:
+            if user.password==password:
+                return render_template('index.html',loggedin=loggedin )
+    return redirect('/login') 
 @app.route("/")
 def main():
     return render_template("index.html")
